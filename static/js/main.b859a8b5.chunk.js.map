{"version":3,"sources":["components/time-session/timer.jsx","components/setting-buttons/break-length.jsx","components/setting-buttons/session-length.jsx","components/pomodoro/pomodoro.jsx","App.js","serviceWorker.js","index.js"],"names":["Timer","props","state","timerSecond","intervalId","isSession","running","play","console","log","playTimer","bind","countDown","resetTimer","audioPlay","buttonPlay","document","querySelector","this","style","backgroundImage","setInterval","disableSitting","setState","clearInterval","timeMinute","toggleInterval","updateMinute","prevState","audioBeep","reset","pause","minutes","seconds","className","id","onClick","preload","src","ref","audio","type","Component","BreakLength","breakValue","disabled","isPlay","onClick1","onClick2","SessionLength","incrementSession","sessionValue","decrementSession","Pomodoro","break","session","timeMin","timerType","decrementBreakTime","incrementBreakTime","onToggleInterval","onReset","downButton","getElementById","disable","upButton","Fragment","e","incrementSessionTime","decrementSessionTime","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b859a8b5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      timerSecond: 0,\r\n      intervalId: 0,\r\n      isSession: true,\r\n      running: false,\r\n      play: false,\r\n    }\r\n\r\n    console.log(this.props)\r\n    this.playTimer = this.playTimer.bind(this);\r\n    this.countDown = this.countDown.bind(this);\r\n    this.resetTimer = this.resetTimer.bind(this);\r\n    this.audioPlay = this.audioPlay.bind(this);\r\n  }\r\n\r\n  playTimer() {\r\n    const buttonPlay = document.querySelector(\".play\");\r\n    console.log(this.state.intervalId);\r\n    if (this.state.running === false) {\r\n      buttonPlay.style.backgroundImage = 'url(\"/static/media/stop-button-svgrepo-com.d2c37072.svg\")';\r\n      let intervalId = setInterval(this.countDown, 1000);\r\n      this.props.disableSitting(true)\r\n      this.setState({ running: true, intervalId: intervalId })\r\n    } else {\r\n      this.setState({ running: false });\r\n      this.props.disableSitting(false)\r\n      buttonPlay.style.backgroundImage = 'url(\"/static/media/play-multimedia-outlined-button-circle-svgrepo-com.fff9f019.svg\")';\r\n      clearInterval(this.state.intervalId);\r\n    }\r\n\r\n  }\r\n\r\n  countDown() {\r\n    console.log(this.state.play)\r\n    const { timerSecond } = this.state;\r\n    switch (timerSecond) {\r\n      case 0:\r\n        if (this.props.timeMinute === 0 && timerSecond === 0) {\r\n          this.setState({ play: true })\r\n          if (this.state.isSession) {\r\n            this.setState({ isSession: false })\r\n            this.props.toggleInterval(this.state.isSession);\r\n\r\n          } else {\r\n            this.setState({ isSession: true })\r\n            this.props.toggleInterval(this.state.isSession)\r\n          }\r\n          this.audioPlay();\r\n\r\n        }\r\n        this.props.updateMinute();\r\n        this.setState({ timerSecond: 59 })\r\n        break;\r\n      default:\r\n        this.setState((prevState) => {\r\n          return {\r\n            timerSecond: prevState.timerSecond - 1\r\n          }\r\n        })\r\n        break;\r\n    }\r\n  }\r\n\r\n  audioPlay() {\r\n    if (this.state.play === true) {\r\n      this.audioBeep.play();\r\n    }\r\n  }\r\n\r\n\r\n  resetTimer() {\r\n    this.props.reset();\r\n    this.setState({\r\n      timerSecond: 0,\r\n      running: false,\r\n      play: false,\r\n\r\n    });\r\n    this.audioBeep.pause();\r\n    document.querySelector(\".play\").style.backgroundImage = \"url('/static/media/play-multimedia-outlined-button-circle-svgrepo-com.fff9f019.svg')\";\r\n    clearInterval(this.state.intervalId)\r\n  }\r\n\r\n  render() {\r\n    let minutes = this.props.timeMinute === 0 ? \"00\" : this.props.timeMinute < 10 ? `0${this.props.timeMinute}` : this.props.timeMinute;\r\n    let seconds = this.state.timerSecond === 0 ? \"00\" : this.state.timerSecond < 10 ? `0${this.state.timerSecond}` : this.state.timerSecond;\r\n    return (\r\n\r\n      <div className=\"timer-clock\">\r\n        <div id=\"time-left\" className=\"time\">\r\n          <h2 id=\"timer-label\" className=\"session-name\">{this.state.isSession === true ? \"Session\" : \"Break\"}</h2>\r\n          <h1 id=\"time-left\" className=\"time-left\">{minutes}:{seconds}\r\n          </h1>\r\n          <div className=\"controlers\">\r\n            <button id=\"start_stop\" className=\"play\" onClick={this.playTimer} />\r\n            <button id=\"reset\" className=\"refresh\" onClick={this.resetTimer} />\r\n          </div>\r\n        </div>\r\n        <audio id=\"beep\" preload=\"auto\" src=\"http://www.accesscontrolsales.com/Ingram_Products/mp3/s7-c3tone.mp3\" ref={(audio) => { this.audioBeep = audio }} type=\"audio/mp3\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Timer;\r\n","import React, { Component } from \"react\";\r\n\r\nclass BreakLength extends Component {\r\n\r\n  render() {\r\n    console.log(this.props.breakValue)\r\n    return (\r\n      <div id=\"break-label\" className=\"break\">\r\n        <button id=\"break-increment\" disabled={this.props.isPlay === true ? \"disabled\" : \"\"} onClick={this.props.onClick1}>\r\n          +\r\n        </button>\r\n        <span id=\"break-length\">{this.props.breakValue}</span>\r\n        <button id=\"break-decrement\" disabled={this.props.isPlay === true ? \"disabled\" : \"\"} onClick={this.props.onClick2}>\r\n          -\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BreakLength;\r\n","import React, { Component } from \"react\";\r\nclass SessionLength extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"session-label\" className=\"session\">\r\n        <button id=\"session-increment\" disabled={this.props.isPlay === true ? \"disabled\" : \"\"} onClick={this.props.incrementSession}>\r\n          +\r\n        </button>\r\n        <span id=\"session-length\">{this.props.sessionValue}</span>\r\n        <button id=\"session-decrement\" disabled={this.props.isPlay === true ? \"disabled\" : \"\"} onClick={this.props.decrementSession}>\r\n          -\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SessionLength;\r\n","import React, { Component } from \"react\";\r\nimport Timer from \"../time-session/timer\";\r\nimport BreakLength from \"../setting-buttons/break-length\";\r\nimport SessionLength from \"../setting-buttons/session-length\";\r\n\r\nclass Pomodoro extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      break: 5,\r\n      session: 25,\r\n      timeMin: 25,\r\n      timerType: \"session\",\r\n      running: false,\r\n      isSession: true,\r\n      isPlay: false\r\n    };\r\n\r\n    this.decrementBreakTime = this.decrementBreakTime.bind(this);\r\n    this.incrementBreakTime = this.incrementBreakTime.bind(this);\r\n    this.onToggleInterval = this.onToggleInterval.bind(this);\r\n    this.updateMinute = this.updateMinute.bind(this);\r\n    this.onReset = this.onReset.bind(this);\r\n    this.disableSitting = this.disableSitting.bind(this)\r\n  }\r\n\r\n  // decrement break Time \r\n  decrementBreakTime() {\r\n    let downButton = document.getElementById(\"break-decrement\");\r\n    if (this.state.break > 1 && this.state.break <= 30) {\r\n      downButton.disable = false;\r\n      this.setState(prevState => {\r\n        return { break: prevState.break - 1 };\r\n      });\r\n    }\r\n  }\r\n\r\n  /// longer break - increment\r\n  incrementBreakTime() {\r\n    let upButton = document.getElementById(\"break-increment\");\r\n    if (this.state.break < 60) {\r\n      console.log(this.state.break);\r\n      upButton.disable = false;\r\n      this.setState(prevState => {\r\n        return { break: prevState.break + 1 };\r\n      });\r\n    } else {\r\n      upButton.disable = true;\r\n    }\r\n  }\r\n\r\n  // shorter session\r\n  decrementSessionTime() {\r\n    let downButton = document.getElementById(\"session-decrement\");\r\n    if (this.state.session > 1 && this.state.session <= 60) {\r\n      downButton.disable = false;\r\n      this.setState(prevState => {\r\n        return { session: prevState.session - 1, timeMin: prevState.session - 1 };\r\n      });\r\n    }\r\n  }\r\n\r\n  //longer session\r\n  incrementSessionTime() {\r\n    let upButton = document.getElementById(\"session-increment\");\r\n    if (this.state.session < 60) {\r\n      upButton.disable = true;\r\n      this.setState(prevState => {\r\n        return { session: prevState.session + 1, timeMin: prevState.session + 1 };\r\n      });\r\n    } else {\r\n      upButton.disable = false;\r\n    }\r\n  }\r\n\r\n  onToggleInterval(isSession) {\r\n    if (isSession) {\r\n      this.setState({ timeMin: this.state.session })\r\n    } else {\r\n      this.setState({ timeMin: this.state.break })\r\n    }\r\n  }\r\n\r\n  updateMinute() {\r\n    this.setState((prevState) => {\r\n      return { timeMin: prevState.timeMin - 1 }\r\n    })\r\n  }\r\n\r\n  onReset() {\r\n    this.setState({\r\n      break: 5,\r\n      session: 25,\r\n      timeMin: 25,\r\n      running: false,\r\n      isPlay: false,\r\n      isSession: false,\r\n    })\r\n  }\r\n\r\n  disableSitting(isPlay) {\r\n    this.setState(\r\n      { isPlay: isPlay }\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1 className=\"title\">Pomodoro Clock</h1>\r\n        <div className=\"setting-length\">\r\n          <BreakLength\r\n            isPlay={this.state.isPlay}\r\n            breakValue={this.state.break}\r\n            onClick1={this.incrementBreakTime}\r\n            onClick2={this.decrementBreakTime}\r\n          />\r\n          <SessionLength\r\n            isPlay={this.state.isPlay}\r\n            sessionValue={this.state.session}\r\n            incrementSession={e => this.incrementSessionTime(e)}\r\n            decrementSession={e => this.decrementSessionTime(e)}\r\n          />\r\n        </div>\r\n        <Timer {...this.state} timeMinute={this.state.timeMin} reset={this.onReset} updateMinute={this.updateMinute} toggleInterval={this.onToggleInterval} disableSitting={this.disableSitting} />\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Pomodoro;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./components/pomodoro/pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <Pomodoro />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}